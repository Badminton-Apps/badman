generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["event", "import", "personal", "public", "ranking", "security"]
}

model Availabilities {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  exceptions Json?      @db.Json
  days       Json       @db.Json
  season     Int
  locationId String?    @db.Uuid
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @default(now()) @db.Timestamptz(6)
  Locations  Locations? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([season, locationId], map: "availability_unique_constraint")
  @@schema("event")
}

model Courts {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?    @db.VarChar(255)
  locationId String?    @db.Uuid
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @default(now()) @db.Timestamptz(6)
  Locations  Locations? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  Games      Games[]

  @@unique([name, locationId])
  @@schema("event")
}

model DrawCompetitions {
  id                    String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String?                     @db.VarChar(255)
  size                  Int?
  subeventId            String?                     @db.Uuid
  createdAt             DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                    @default(now()) @db.Timestamptz(6)
  visualCode            String?                     @db.VarChar(255)
  type                  enum_DrawCompetitions_type?
  risers                Int                         @default(1)
  fallers               Int                         @default(1)
  SubEventCompetitions  SubEventCompetitions?       @relation(fields: [subeventId], references: [id], onDelete: Cascade)
  EncounterCompetitions EncounterCompetitions[]

  @@unique([name, visualCode, subeventId, type], map: "DrawCompetitions_unique_constraint")
  @@schema("event")
}

model DrawTournaments {
  id                  String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?                    @db.VarChar(255)
  type                enum_DrawTournaments_type?
  size                Int?
  visualCode          String?                    @db.VarChar(255)
  subeventId          String?                    @db.Uuid
  createdAt           DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime                   @default(now()) @db.Timestamptz(6)
  risers              Int                        @default(1)
  fallers             Int                        @default(0)
  SubEventTournaments SubEventTournaments?       @relation(fields: [subeventId], references: [id], onDelete: Cascade)

  @@unique([name, type, visualCode, subeventId], map: "DrawTournaments_unique_constraint")
  @@schema("event")
}

model EncounterChangeDates {
  id                String                                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  encounterChangeId String?                                     @db.Uuid
  selected          Boolean?
  date              DateTime                                    @db.Timestamptz(6)
  availabilityHome  enum_EncounterChangeDates_availabilityHome?
  availabilityAway  enum_EncounterChangeDates_availabilityAway?
  createdAt         DateTime?                                   @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?                                   @default(now()) @db.Timestamptz(6)
  EncounterChanges  EncounterChanges?                           @relation(fields: [encounterChangeId], references: [id], onDelete: Cascade)

  @@schema("event")
}

model EncounterChanges {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accepted              Boolean                @default(false)
  encounterId           String?                @db.Uuid
  createdAt             DateTime?              @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime?              @default(now()) @db.Timestamptz(6)
  EncounterChangeDates  EncounterChangeDates[]
  EncounterCompetitions EncounterCompetitions? @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  @@schema("event")
}

model EncounterCompetitions {
  id                                                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                                                DateTime?          @db.Timestamptz(6)
  drawId                                              String?            @db.Uuid
  homeTeamId                                          String?            @db.Uuid
  awayTeamId                                          String?            @db.Uuid
  createdAt                                           DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt                                           DateTime           @default(now()) @db.Timestamptz(6)
  originalDate                                        DateTime?          @db.Timestamptz(6)
  synced                                              DateTime?          @db.Timestamptz(6)
  visualCode                                          String?            @db.VarChar(255)
  homeScore                                           Int?
  awayScore                                           Int?
  gameLeaderId                                        String?            @db.Uuid
  shuttle                                             String?            @db.VarChar(255)
  startHour                                           String?            @db.VarChar(255)
  endHour                                             String?            @db.VarChar(255)
  enteredById                                         String?            @db.Uuid
  acceptedById                                        String?            @db.Uuid
  enteredOn                                           DateTime?          @db.Timestamptz(6)
  acceptedOn                                          DateTime?          @db.Timestamptz(6)
  accepted                                            Boolean            @default(false)
  finished                                            Boolean            @default(false)
  EncounterChanges                                    EncounterChanges[]
  Players_EncounterCompetitions_acceptedByIdToPlayers Players?           @relation("EncounterCompetitions_acceptedByIdToPlayers", fields: [acceptedById], references: [id], onDelete: Cascade)
  Teams_EncounterCompetitions_awayTeamIdToTeams       Teams?             @relation("EncounterCompetitions_awayTeamIdToTeams", fields: [awayTeamId], references: [id], onDelete: Cascade)
  DrawCompetitions                                    DrawCompetitions?  @relation(fields: [drawId], references: [id], onDelete: Cascade)
  Players_EncounterCompetitions_enteredByIdToPlayers  Players?           @relation("EncounterCompetitions_enteredByIdToPlayers", fields: [enteredById], references: [id], onDelete: Cascade)
  Players_EncounterCompetitions_gameLeaderIdToPlayers Players?           @relation("EncounterCompetitions_gameLeaderIdToPlayers", fields: [gameLeaderId], references: [id], onDelete: Cascade)
  Teams_EncounterCompetitions_homeTeamIdToTeams       Teams?             @relation("EncounterCompetitions_homeTeamIdToTeams", fields: [homeTeamId], references: [id], onDelete: Cascade)
  Assemblies                                          Assemblies[]

  @@schema("event")
}

model Entries {
  id                                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId                             String?     @db.Uuid
  player1Id                          String?     @db.Uuid
  player2Id                          String?     @db.Uuid
  drawId                             String?     @db.Uuid
  subEventId                         String?     @db.Uuid
  entryType                          String?     @db.VarChar(255)
  meta                               Json?       @db.Json
  createdAt                          DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt                          DateTime    @default(now()) @db.Timestamptz(6)
  date                               DateTime?   @db.Timestamptz(6)
  Players_Entries_player1IdToPlayers Players?    @relation("Entries_player1IdToPlayers", fields: [player1Id], references: [id], onDelete: Cascade)
  Players_Entries_player2IdToPlayers Players?    @relation("Entries_player2IdToPlayers", fields: [player2Id], references: [id], onDelete: Cascade)
  Teams                              Teams?      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Standings                          Standings[]

  @@schema("event")
}

model EventCompetitions {
  id                        String                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String?                                 @db.VarChar(255)
  season                    Int?
  type                      enum_EventCompetitions_type?
  createdAt                 DateTime                                @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                                @default(now()) @db.Timestamptz(6)
  changeUntill_1            DateTime?                               @db.Timestamptz(6)
  changeUntill_2            DateTime?                               @db.Timestamptz(6)
  visualCode                String?                                 @db.VarChar(255)
  started                   Boolean?                                @default(false)
  slug                      String?                                 @unique @db.VarChar(255)
  usedRankingUnit           enum_EventCompetitions_usedRankingUnit? @default(months)
  usedRankingAmount         Int?                                    @default(4)
  checkEncounterForFilledIn Boolean                                 @default(false)
  official                  Boolean                                 @default(false)
  lastSync                  DateTime?                               @db.Timestamptz(6)
  openDate                  DateTime?                               @db.Timestamptz(6)
  closeDate                 DateTime?                               @db.Timestamptz(6)
  state                     String?                                 @db.VarChar(255)
  country                   String?                                 @db.VarChar(255)
  changeOpenDate            DateTime?                               @db.Timestamptz(6)
  changeCloseDate           DateTime?                               @db.Timestamptz(6)
  changeCloseRequestDate    DateTime?                               @db.Timestamptz(6)
  SubEventCompetitions      SubEventCompetitions[]

  @@unique([name, season, type, visualCode], map: "EventCompetitions_unique_constraint")
  @@schema("event")
}

model EventTournaments {
  id                       String                                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tournamentNumber         String?                                @db.VarChar(255)
  name                     String?                                @db.VarChar(255)
  firstDay                 DateTime?                              @db.Timestamptz(6)
  dates                    String?
  createdAt                DateTime                               @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                               @default(now()) @db.Timestamptz(6)
  visualCode               String?                                @db.VarChar(255)
  slug                     String?                                @unique @db.VarChar(255)
  usedRankingUnit          enum_EventTournaments_usedRankingUnit? @default(months)
  usedRankingAmount        Int?                                   @default(4)
  official                 Boolean                                @default(false)
  lastSync                 DateTime?                              @db.Timestamptz(6)
  openDate                 DateTime?                              @db.Timestamptz(6)
  closeDate                DateTime?                              @db.Timestamptz(6)
  state                    String?                                @db.VarChar(255)
  country                  String?                                @db.VarChar(255)
  LocationEventTournaments LocationEventTournaments[]
  SubEventTournaments      SubEventTournaments[]

  @@unique([name, firstDay, visualCode], map: "EventTournaments_unique_constraint")
  @@schema("event")
}

model GamePlayerMemberships {
  team           Int?
  player         Int?
  playerId       String          @db.Uuid
  gameId         String          @db.Uuid
  single         Int?
  double         Int?
  mix            Int?
  systemId       String?         @db.Uuid
  RankingSystems RankingSystems? @relation(fields: [systemId], references: [id], onDelete: Cascade)
  Games          Games           @relation(fields: [gameId], references: [id], onDelete: Cascade, map: "GamePlayers_gameId_fkey")
  Players        Players         @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "GamePlayers_playerId_fkey")

  @@id([playerId, gameId], map: "GamePlayers_pkey")
  @@index([gameId], map: "game_players_game_id")
  @@index([playerId], map: "game_players_player_id")
  @@schema("event")
}

model Games {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  playedAt              DateTime?               @db.Timestamptz(6)
  gameType              enum_Games_gameType?
  set1Team1             Int?
  set1Team2             Int?
  set2Team1             Int?
  set2Team2             Int?
  set3Team1             Int?
  set3Team2             Int?
  winner                Int?
  courtId               String?                 @db.Uuid
  createdAt             DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @db.Timestamptz(6)
  linkId                String?                 @db.Uuid
  linkType              String?                 @db.VarChar(255)
  order                 Int?
  round                 String?                 @db.VarChar(255)
  visualCode            String?                 @db.VarChar(255)
  status                enum_Games_status?
  GamePlayerMemberships GamePlayerMemberships[]
  Courts                Courts?                 @relation(fields: [courtId], references: [id], onDelete: Cascade)
  RankingPoints         RankingPoints[]

  @@index([linkId, linkType], map: "game_parent_index")
  @@schema("event")
}

model LocationEventTournaments {
  eventId          String           @db.Uuid
  locationId       String           @db.Uuid
  EventTournaments EventTournaments @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Locations        Locations        @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([eventId, locationId])
  @@schema("event")
}

model Locations {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String?                    @db.VarChar(255)
  createdAt                DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                   @default(now()) @db.Timestamptz(6)
  address                  String?                    @db.VarChar(255)
  city                     String?                    @db.VarChar(255)
  fax                      String?                    @db.VarChar(255)
  phone                    String?                    @db.VarChar(255)
  postalcode               String?                    @db.VarChar(255)
  state                    String?                    @db.VarChar(255)
  street                   String?                    @db.VarChar(255)
  streetNumber             String?                    @db.VarChar(255)
  clubId                   String?                    @db.Uuid
  coordinates              Unsupported("geometry")?
  Availabilities           Availabilities[]
  Courts                   Courts[]
  LocationEventTournaments LocationEventTournaments[]
  Clubs                    Clubs?                     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  TeamLocationCompetitions TeamLocationCompetitions[] @ignore

  @@index([clubId], map: "locations_club_id")
  @@schema("event")
}

model Standings {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entryId         String?  @db.Uuid
  position        Int?
  points          Int?
  played          Int?
  gamesWon        Int?
  gamesLost       Int?
  setsWon         Int?
  setsLost        Int?
  totalPointsWon  Int?
  totalPointsLost Int?
  won             Int?
  lost            Int?
  tied            Int?
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @db.Timestamptz(6)
  riser           Boolean  @default(false)
  faller          Boolean  @default(false)
  size            Int?
  Entries         Entries? @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@schema("event")
}

model SubEventCompetitions {
  id                                         String                                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                       String?                                      @db.VarChar(255)
  eventType                                  enum_SubEventCompetitions_eventType?
  level                                      Int?
  maxLevel                                   Int?
  minBaseIndex                               Int?
  maxBaseIndex                               Int?
  eventId                                    String?                                      @db.Uuid
  createdAt                                  DateTime                                     @default(now()) @db.Timestamptz(6)
  updatedAt                                  DateTime                                     @default(now()) @db.Timestamptz(6)
  visualCode                                 String?                                      @db.VarChar(255)
  DrawCompetitions                           DrawCompetitions[]
  EventCompetitions                          EventCompetitions?                           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  RankingGroupSubEventCompetitionMemberships RankingGroupSubEventCompetitionMemberships[]

  @@unique([name, eventType, visualCode, eventId], map: "SubEventCompetitions_unique_constraint")
  @@schema("event")
}

model SubEventTournaments {
  id                                        String                                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                      String?                                     @db.VarChar(255)
  eventType                                 enum_SubEventTournaments_eventType?
  gameType                                  enum_SubEventTournaments_gameType?
  level                                     Int?
  visualCode                                String?                                     @db.VarChar(255)
  eventId                                   String?                                     @db.Uuid
  createdAt                                 DateTime                                    @default(now()) @db.Timestamptz(6)
  updatedAt                                 DateTime                                    @default(now()) @db.Timestamptz(6)
  DrawTournaments                           DrawTournaments[]
  EventTournaments                          EventTournaments?                           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  RankingGroupSubEventTournamentMemberships RankingGroupSubEventTournamentMemberships[]

  @@unique([name, eventType, gameType, visualCode, eventId], map: "SubEventTournaments_unique_constraint")
  @@schema("event")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model TeamLocationCompetitions {
  teamId     String?    @db.Uuid
  locationId String?    @db.Uuid
  Locations  Locations? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  Teams      Teams?     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@ignore
  @@schema("event")
}

model Files {
  id               String           @id @db.VarChar(255)
  createdAt        DateTime         @db.Timestamptz(6)
  updatedAt        DateTime         @db.Timestamptz(6)
  dates            String?          @db.VarChar(255)
  firstDay         DateTime?        @db.Timestamptz(6)
  fileLocation     String?          @db.VarChar(255)
  name             String?          @db.VarChar(255)
  type             enum_Files_type?
  linkCode         String?          @db.VarChar(255)
  visualCode       String?          @db.VarChar(255)
  importing        Boolean?         @default(false)
  tournamentNumber Int?

  @@unique([name, type, firstDay])
  @@schema("import")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model Assemblies {
  id                                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assembly                              Json?                  @db.Json
  description                           String?
  encounterId                           String?                @db.Uuid
  teamId                                String?                @db.Uuid
  captainId                             String?                @db.Uuid
  playerId                              String?                @db.Uuid
  createdAt                             DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                             DateTime               @default(now()) @db.Timestamptz(6)
  Players_Assemblies_captainIdToPlayers Players?               @relation("Assemblies_captainIdToPlayers", fields: [captainId], references: [id])
  EncounterCompetitions                 EncounterCompetitions? @relation(fields: [encounterId], references: [id])
  Players_Assemblies_playerIdToPlayers  Players?               @relation("Assemblies_playerIdToPlayers", fields: [playerId], references: [id])
  Teams                                 Teams?                 @relation(fields: [teamId], references: [id])

  @@schema("personal")
}

model Notifications {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sendToId  String    @db.Uuid
  type      String    @db.VarChar(255)
  linkType  String    @db.VarChar(255)
  linkId    String    @db.Uuid
  read      Boolean
  meta      Json?     @db.Json
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  Players   Players   @relation(fields: [sendToId], references: [id], onDelete: Cascade)

  @@schema("personal")
}

model Settings {
  id                                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  playerId                                String   @db.Uuid
  pushSubscriptions                       Json?    @db.Json
  encounterNotEnteredNotification         Int
  encounterNotAcceptedNotification        Int
  encounterChangeNewNotification          Int
  encounterChangeConformationNotification Int
  encounterChangeFinishedNotification     Int
  createdAt                               DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                               DateTime @default(now()) @db.Timestamptz(6)
  language                                String?  @default("nl_BE") @db.VarChar(255)
  syncSuccessNotification                 Int      @default(0)
  syncFailedNotification                  Int      @default(0)
  clubEnrollmentNotification              Int      @default(2)
  Players                                 Players  @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId], map: "settings_player_id")
  @@schema("personal")
}

model ClubPlayerMemberships {
  playerId  String    @db.Uuid
  clubId    String    @db.Uuid
  start     DateTime  @db.Timestamptz(6)
  end       DateTime? @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  active    Boolean?  @default(true)
  id        String    @id(map: "ClubMemberships_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Clubs     Clubs     @relation(fields: [clubId], references: [id], onDelete: Cascade, map: "ClubMemberships_clubId_fkey")
  Players   Players   @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "ClubMemberships_playerId_fkey")

  @@unique([playerId, clubId, start], map: "ClubMemberships_playerId_clubId_start_key")
  @@index([playerId, clubId], map: "player_club_index")
  @@schema("public")
}

model Clubs {
  id                    String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                     @db.VarChar(255)
  clubId                Int?
  createdAt             DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                   @default(now()) @db.Timestamptz(6)
  abbreviation          String?                    @db.VarChar(255)
  fullName              String?                    @db.VarChar(255)
  useForTeamName        enum_Clubs_useForTeamName? @default(name)
  slug                  String?                    @unique @db.VarChar(255)
  state                 String?                    @db.VarChar(255)
  country               String?                    @db.VarChar(255)
  Locations             Locations[]
  ClubPlayerMemberships ClubPlayerMemberships[]
  Comments              Comments[]
  Teams                 Teams[]

  @@unique([name, clubId], map: "club_number_unique")
  @@index([name], map: "clubs_name")
  @@schema("public")
}

model Comments {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  playerId  String?   @db.Uuid
  clubId    String?   @db.Uuid
  message   String?
  linkId    String?   @db.Uuid
  linkType  String?   @db.VarChar(255)
  Clubs     Clubs?    @relation(fields: [clubId], references: [id], onDelete: Cascade)
  Players   Players?  @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([linkId, linkType, clubId], map: "comment_index")
  @@schema("public")
}

model Faqs {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question  String?
  answer    String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model Players {
  id                                                                String                   @id @unique(map: "players_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                             String?                  @db.VarChar(255)
  gender                                                            String?                  @db.VarChar(255)
  firstName                                                         String?                  @db.VarChar(255)
  lastName                                                          String?                  @db.VarChar(255)
  memberId                                                          String?                  @db.VarChar(255)
  createdAt                                                         DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt                                                         DateTime                 @default(now()) @db.Timestamptz(6)
  birthDate                                                         DateTime?                @db.Timestamptz(6)
  competitionPlayer                                                 Boolean?                 @default(false)
  phone                                                             String?                  @db.VarChar(255)
  sub                                                               String?                  @db.VarChar(255)
  slug                                                              String?                  @unique @db.VarChar(255)
  EncounterCompetitions_EncounterCompetitions_acceptedByIdToPlayers EncounterCompetitions[]  @relation("EncounterCompetitions_acceptedByIdToPlayers")
  EncounterCompetitions_EncounterCompetitions_enteredByIdToPlayers  EncounterCompetitions[]  @relation("EncounterCompetitions_enteredByIdToPlayers")
  EncounterCompetitions_EncounterCompetitions_gameLeaderIdToPlayers EncounterCompetitions[]  @relation("EncounterCompetitions_gameLeaderIdToPlayers")
  Entries_Entries_player1IdToPlayers                                Entries[]                @relation("Entries_player1IdToPlayers")
  Entries_Entries_player2IdToPlayers                                Entries[]                @relation("Entries_player2IdToPlayers")
  GamePlayerMemberships                                             GamePlayerMemberships[]
  Assemblies_Assemblies_captainIdToPlayers                          Assemblies[]             @relation("Assemblies_captainIdToPlayers")
  Assemblies_Assemblies_playerIdToPlayers                           Assemblies[]             @relation("Assemblies_playerIdToPlayers")
  Notifications                                                     Notifications[]
  Settings                                                          Settings[]
  ClubPlayerMemberships                                             ClubPlayerMemberships[]
  Comments                                                          Comments[]
  RequestLinks                                                      RequestLinks[]
  TeamPlayerMemberships                                             TeamPlayerMemberships[]
  Teams                                                             Teams[]
  RankingLastPlaces                                                 RankingLastPlaces[]
  RankingPlaces                                                     RankingPlaces[]
  RankingPoints                                                     RankingPoints[]
  PlayerClaimMemberships                                            PlayerClaimMemberships[]
  PlayerRoleMemberships                                             PlayerRoleMemberships[]

  @@unique([firstName, lastName, memberId])
  @@index([firstName], map: "players_first_name")
  @@index([lastName], map: "players_last_name")
  @@index([memberId], map: "players_member_id")
  @@schema("public")
}

model RequestLinks {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  playerId  String?  @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  sub       String?  @db.VarChar(255)
  Players   Players? @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "RequestLinks_PlayerId_fkey")

  @@index([playerId], map: "request_links__player_id")
  @@schema("public")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)

  @@schema("public")
}

model TeamPlayerMemberships {
  playerId       String                                    @db.Uuid
  teamId         String                                    @db.Uuid
  end            DateTime?                                 @db.Timestamptz(6)
  start          DateTime                                  @db.Timestamptz(6)
  id             String                                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime                                  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime                                  @default(now()) @db.Timestamptz(6)
  membershipType enum_TeamPlayerMemberships_membershipType @default(REGULAR)
  Players        Players                                   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  Teams          Teams                                     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([playerId, teamId, start])
  @@index([playerId, teamId], map: "player_team_index")
  @@schema("public")
}

model Teams {
  id                                                            String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                          String?                    @db.VarChar(255)
  createdAt                                                     DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                                                     DateTime                   @default(now()) @db.Timestamptz(6)
  abbreviation                                                  String?                    @db.VarChar(255)
  captainId                                                     String?                    @db.Uuid
  clubId                                                        String?                    @db.Uuid
  teamNumber                                                    Int?
  preferredDay                                                  enum_Teams_preferredDay?
  preferredTime                                                 DateTime?                  @db.Time(6)
  type                                                          String?                    @db.VarChar(255)
  email                                                         String?                    @db.VarChar(255)
  phone                                                         String?                    @db.VarChar(255)
  slug                                                          String?                    @unique @db.VarChar(255)
  season                                                        Int                        @default(2022)
  link                                                          String                     @db.Uuid
  preferredTime2                                                DateTime?                  @db.Time(6)
  preferredDay2                                                 enum_Teams_preferredDay2?
  EncounterCompetitions_EncounterCompetitions_awayTeamIdToTeams EncounterCompetitions[]    @relation("EncounterCompetitions_awayTeamIdToTeams")
  EncounterCompetitions_EncounterCompetitions_homeTeamIdToTeams EncounterCompetitions[]    @relation("EncounterCompetitions_homeTeamIdToTeams")
  Entries                                                       Entries[]
  TeamLocationCompetitions                                      TeamLocationCompetitions[] @ignore
  Assemblies                                                    Assemblies[]
  TeamPlayerMemberships                                         TeamPlayerMemberships[]
  Players                                                       Players?                   @relation(fields: [captainId], references: [id], onDelete: Cascade)
  Clubs                                                         Clubs?                     @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@index([clubId], map: "teams_club_index")
  @@schema("public")
}

model socket_io_attachments {
  id         BigInt    @unique @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  payload    Bytes?

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)

  @@schema("public")
}

model RankingGroupSubEventCompetitionMemberships {
  subEventId           String               @db.Uuid
  groupId              String               @db.VarChar(255)
  RankingGroups        RankingGroups        @relation(fields: [groupId], references: [id], onDelete: Cascade, map: "GroupSubEventCompetitions_groupId_fkey")
  SubEventCompetitions SubEventCompetitions @relation(fields: [subEventId], references: [id], onDelete: Cascade, map: "GroupSubEventCompetitions_subEventId_fkey")

  @@id([subEventId, groupId], map: "GroupSubEventCompetitions_pkey")
  @@schema("ranking")
}

model RankingGroupSubEventTournamentMemberships {
  subEventId          String              @db.Uuid
  groupId             String              @db.VarChar(255)
  RankingGroups       RankingGroups       @relation(fields: [groupId], references: [id], onDelete: Cascade, map: "GroupSubEventTournaments_groupId_fkey")
  SubEventTournaments SubEventTournaments @relation(fields: [subEventId], references: [id], onDelete: Cascade, map: "GroupSubEventTournaments_subEventId_fkey")

  @@id([subEventId, groupId], map: "GroupSubEventTournaments_pkey")
  @@schema("ranking")
}

model RankingGroups {
  id                                         String                                       @id(map: "Groups_pkey") @default(dbgenerated("gen_random_uuid()")) @db.VarChar(255)
  createdAt                                  DateTime                                     @default(now()) @db.Timestamptz(6)
  updatedAt                                  DateTime                                     @default(now()) @db.Timestamptz(6)
  name                                       String?                                      @unique(map: "Groups_name_key") @db.VarChar(255)
  RankingGroupSubEventCompetitionMemberships RankingGroupSubEventCompetitionMemberships[]
  RankingGroupSubEventTournamentMemberships  RankingGroupSubEventTournamentMemberships[]
  RankingSystemRankingGroupMemberships       RankingSystemRankingGroupMemberships[]

  @@schema("ranking")
}

model RankingLastPlaces {
  id                     String          @id(map: "LastPlaces_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt              DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime?       @default(now()) @db.Timestamptz(6)
  playerId               String?         @db.Uuid
  systemId               String?         @db.Uuid
  rankingDate            DateTime?       @db.Timestamptz(6)
  singlePoints           Int?
  mixPoints              Int?
  doublePoints           Int?
  singlePointsDowngrade  Int?
  mixPointsDowngrade     Int?
  doublePointsDowngrade  Int?
  singleRank             Int?
  mixRank                Int?
  doubleRank             Int?
  totalSingleRanking     Int?
  totalMixRanking        Int?
  totalDoubleRanking     Int?
  totalWithinSingleLevel Int?
  totalWithinMixLevel    Int?
  totalWithinDoubleLevel Int?
  single                 Int?
  mix                    Int?
  double                 Int?
  singleInactive         Boolean?
  mixInactive            Boolean?
  doubleInactive         Boolean?
  gender                 String?         @db.VarChar(255)
  Players                Players?        @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "LastPlaces_playerId_fkey")
  RankingSystems         RankingSystems? @relation(fields: [systemId], references: [id], onDelete: Cascade, map: "LastPlaces_systemId_fkey")

  @@unique([playerId, systemId], map: "lastPlaces_ranking_index")
  @@unique([playerId, systemId], map: "lastPlaces_unique_constraint")
  @@schema("ranking")
}

model RankingPlaces {
  id                     String          @id(map: "Places_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rankingDate            DateTime?       @db.Timestamptz(6)
  singlePoints           Int?
  mixPoints              Int?
  doublePoints           Int?
  singleRank             Int?
  mixRank                Int?
  doubleRank             Int?
  single                 Int?
  mix                    Int?
  double                 Int?
  singlePointsDowngrade  Int?
  doublePointsDowngrade  Int?
  mixPointsDowngrade     Int?
  singleInactive         Boolean?        @default(false)
  doubleInactive         Boolean?        @default(false)
  mixInactive            Boolean?        @default(false)
  totalSingleRanking     Int?
  totalDoubleRanking     Int?
  totalMixRanking        Int?
  totalWithinSingleLevel Int?
  totalWithinDoubleLevel Int?
  totalWithinMixLevel    Int?
  playerId               String?         @db.Uuid
  systemId               String?         @db.Uuid
  createdAt              DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime        @default(now()) @db.Timestamptz(6)
  updatePossible         Boolean?
  gender                 String?         @db.VarChar(255)
  Players                Players?        @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "Places_PlayerId_fkey")
  RankingSystems         RankingSystems? @relation(fields: [systemId], references: [id], onDelete: Cascade, map: "Places_SystemId_fkey")

  @@unique([rankingDate, playerId, systemId], map: "Places_rankingDate_PlayerId_SystemId_key")
  @@unique([playerId, systemId, rankingDate], map: "places_system_index")
  @@index([rankingDate], map: "places_date_index", type: Brin)
  @@index([playerId, systemId], map: "ranking_index")
  @@schema("ranking")
}

model RankingPoints {
  id                String          @id(map: "Points_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  points            Int?
  rankingDate       DateTime?       @db.Timestamptz(6)
  differenceInLevel Int?
  playerId          String?         @db.Uuid
  gameId            String?         @db.Uuid
  systemId          String?         @db.Uuid
  createdAt         DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime        @default(now()) @db.Timestamptz(6)
  Games             Games?          @relation(fields: [gameId], references: [id], onDelete: Cascade, map: "Points_GameId_fkey")
  Players           Players?        @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "Points_PlayerId_fkey")
  RankingSystems    RankingSystems? @relation(fields: [systemId], references: [id], onDelete: Cascade, map: "Points_SystemId_fkey")

  @@unique([playerId, gameId, systemId], map: "point_player_system_index")
  @@index([gameId, systemId], map: "point_game_system_index")
  @@index([systemId, playerId], map: "point_system_index")
  @@index([rankingDate], map: "points_date_index", type: Brin)
  @@schema("ranking")
}

model RankingSystemRankingGroupMemberships {
  groupId        String         @db.VarChar(255)
  systemId       String         @db.Uuid
  RankingGroups  RankingGroups  @relation(fields: [groupId], references: [id], onDelete: Cascade, map: "GroupSystems_groupId_fkey")
  RankingSystems RankingSystems @relation(fields: [systemId], references: [id], onDelete: Cascade, map: "GroupSystems_systemId_fkey")

  @@id([systemId, groupId], map: "GroupSystems_pkey")
  @@schema("ranking")
}

model RankingSystems {
  id                                   String                                 @id(map: "Systems_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                 String?                                @unique(map: "Systems_name_key") @db.VarChar(255)
  amountOfLevels                       Int?
  primary                              Boolean?
  procentWinning                       Int?
  procentWinningPlus1                  Int?
  procentLosing                        Int?
  minNumberOfGamesUsedForUpgrade       Int?
  maxDiffLevels                        Int?
  maxDiffLevelsHighest                 Int?
  latestXGamesToUse                    Int?
  updateIntervalAmount                 Int?
  updateIntervalUnit                   enum_Systems_updateIntervalUnit?
  periodAmount                         Int?
  periodUnit                           enum_Systems_periodUnit?
  rankingSystem                        enum_Systems_rankingSystem?
  runCurrently                         Boolean?                               @default(false)
  runDate                              DateTime?                              @db.Timestamptz(6)
  startingType                         enum_Systems_startingType?             @default(formula)
  differenceForUpgrade                 Int?                                   @default(1)
  differenceForDowngrade               Int?                                   @default(0)
  maxLevelUpPerChange                  Int?
  maxLevelDownPerChange                Int?
  inactivityAmount                     Int?
  inactivityUnit                       enum_Systems_inactivityUnit?
  gamesForInactivty                    Int?
  createdAt                            DateTime                               @default(now()) @db.Timestamptz(6)
  updatedAt                            DateTime                               @default(now()) @db.Timestamptz(6)
  updateIntervalAmountLastUpdate       DateTime?                              @default(dbgenerated("'2016-08-31 22:00:00+00'::timestamp with time zone")) @db.Timestamptz(6)
  caluclationIntervalAmount            Int?
  calculationIntervalUnit              enum_Systems_calculationIntervalUnit?
  caluclationIntervalLastUpdate        DateTime?                              @default(dbgenerated("'2016-08-31 22:00:00+00'::timestamp with time zone")) @db.Timestamptz(6)
  inactiveBehavior                     enum_RankingSystems_inactiveBehavior?
  GamePlayerMemberships                GamePlayerMemberships[]
  RankingLastPlaces                    RankingLastPlaces[]
  RankingPlaces                        RankingPlaces[]
  RankingPoints                        RankingPoints[]
  RankingSystemRankingGroupMemberships RankingSystemRankingGroupMemberships[]

  @@schema("ranking")
}

model Claims {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?                  @db.VarChar(255)
  description            String?                  @db.VarChar(255)
  category               String?                  @db.VarChar(255)
  type                   enum_Claims_type
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                 @default(now()) @db.Timestamptz(6)
  PlayerClaimMemberships PlayerClaimMemberships[]
  RoleClaimMemberships   RoleClaimMemberships[]

  @@unique([name, category, type])
  @@index([description], map: "claims_description")
  @@index([name], map: "claims_name")
  @@schema("security")
}

model PlayerClaimMemberships {
  playerId  String   @db.Uuid
  claimId   String   @db.Uuid
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Claims    Claims   @relation(fields: [claimId], references: [id], onDelete: Cascade)
  Players   Players  @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "PlayerClaimMemberships_userId_fkey")

  @@id([playerId, claimId])
  @@schema("security")
}

model PlayerRoleMemberships {
  playerId  String   @db.Uuid
  roleId    String   @db.Uuid
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Roles     Roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Players   Players  @relation(fields: [playerId], references: [id], onDelete: Cascade, map: "PlayerRoleMemberships_userId_fkey")

  @@id([playerId, roleId])
  @@schema("security")
}

model RoleClaimMemberships {
  roleId    String   @db.Uuid
  claimId   String   @db.Uuid
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Claims    Claims   @relation(fields: [claimId], references: [id], onDelete: Cascade)
  Roles     Roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, claimId])
  @@schema("security")
}

model Roles {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String?                 @db.VarChar(255)
  description           String?                 @db.VarChar(255)
  linkId                String?                 @db.Uuid
  createdAt             DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @db.Timestamptz(6)
  linkType              enum_Roles_linkType
  locked                Boolean                 @default(false)
  PlayerRoleMemberships PlayerRoleMemberships[]
  RoleClaimMemberships  RoleClaimMemberships[]

  @@index([description], map: "roles_description")
  @@index([name], map: "roles_name")
  @@schema("security")
}

enum enum_DrawCompetitions_type {
  KO
  POULE
  QUALIFICATION

  @@schema("event")
}

enum enum_DrawTournaments_type {
  KO
  POULE
  QUALIFICATION

  @@schema("event")
}

enum enum_EncounterChangeDates_availabilityAway {
  POSSIBLE
  NOT_POSSIBLE

  @@schema("event")
}

enum enum_EncounterChangeDates_availabilityHome {
  POSSIBLE
  NOT_POSSIBLE

  @@schema("event")
}

enum enum_EventCompetitions_type {
  PROV
  LIGA
  NATIONAL

  @@schema("event")
}

enum enum_EventCompetitions_usedRankingUnit {
  months
  weeks
  days

  @@schema("event")
}

enum enum_EventTournaments_usedRankingUnit {
  months
  weeks
  days

  @@schema("event")
}

enum enum_Games_gameType {
  S
  D
  MX

  @@schema("event")
}

enum enum_Games_status {
  NORMAL
  WALKOVER
  RETIREMENT
  DISQUALIFIED
  NO_MATCH

  @@schema("event")
}

enum enum_SubEventCompetitions_eventType {
  M
  F
  MX
  MINIBAD

  @@schema("event")
}

enum enum_SubEventTournaments_eventType {
  M
  F
  MX
  MINIBAD

  @@schema("event")
}

enum enum_SubEventTournaments_gameType {
  S
  D
  MX

  @@schema("event")
}

enum enum_Files_type {
  COMPETITION_CP
  COMPETITION_XML
  TOERNAMENT
  TOURNAMENT

  @@schema("import")
}

enum enum_Clubs_useForTeamName {
  name
  fullName
  abbreviation

  @@schema("public")
}

enum enum_TeamPlayerMemberships_membershipType {
  REGULAR
  BACKUP

  @@schema("public")
}

enum enum_Teams_preferredDay {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday

  @@schema("public")
}

enum enum_Teams_preferredDay2 {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday

  @@schema("public")
}

enum enum_RankingSystems_inactiveBehavior {
  freeze
  decrease

  @@schema("ranking")
}

enum enum_Systems_calculationIntervalUnit {
  months
  weeks
  days

  @@schema("ranking")
}

enum enum_Systems_inactivityUnit {
  months
  weeks
  days

  @@schema("ranking")
}

enum enum_Systems_periodUnit {
  months
  weeks
  days

  @@schema("ranking")
}

enum enum_Systems_rankingSystem {
  BVL
  ORIGINAL
  LFBB
  VISUAL

  @@schema("ranking")
}

enum enum_Systems_startingType {
  formula
  tableLFBB
  tableBVL

  @@schema("ranking")
}

enum enum_Systems_updateIntervalUnit {
  months
  weeks
  days

  @@schema("ranking")
}

enum enum_Claims_type {
  global
  club
  team
  competition
  tournament

  @@schema("security")
}

enum enum_Roles_linkType {
  global
  club
  team
  competition
  tournament

  @@schema("security")
}
