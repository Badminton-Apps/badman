import { RankingSystems } from '@badman/utils';
import { RankingSystem } from '../models';
import { SystemGroupBuilder } from './systemGroupBuilder';
import { RankingPlaceBuilder } from './rankingPlaceBuilder';
import { RankingLastPlaceBuilder } from './rankingLastPlaceBuilder';
export declare class SystemBuilder {
    private build;
    private system;
    private groups;
    private rankingPlaces;
    private rankingLastPlaces;
    constructor(rankingSystem: RankingSystems, amountOfLevels: number, procentWinning: number, procentWinningPlus1: number);
    static Create(rankingSystem: RankingSystems, amountOfLevels: number, procentWinning: number, procentWinningPlus1: number): SystemBuilder;
    WithName(name: string): SystemBuilder;
    WithGroup(group: SystemGroupBuilder): this;
    WithcalculationIntervalAmount(calculationIntervalAmount: number): SystemBuilder;
    WithCalculationIntervalUnit(calculationIntervalUnit: 'months' | 'weeks' | 'days'): SystemBuilder;
    WithUpdateIntervalAmount(updateIntervalAmount: number): SystemBuilder;
    WithUpdateIntervalUnit(updateIntervalUnit: 'months' | 'weeks' | 'days'): SystemBuilder;
    WithProcentWinning(procentWinning: number): SystemBuilder;
    WithProcentWinningPlus1(procentWinningPlus1: number): SystemBuilder;
    WithProcentLosing(procentLosing: number): SystemBuilder;
    WithMinNumberOfGamesUsedForUpgrade(minNumberOfGamesUsedForUpgrade: number): SystemBuilder;
    WithMinNumberOfGamesUsedForDowngrade(minNumberOfGamesUsedForDowngrade: number): SystemBuilder;
    WithMaxDiffLevels(maxDiffLevels: number): SystemBuilder;
    WithMaxDiffLevelsHighest(maxDiffLevelsHighest: number): SystemBuilder;
    WithLatestXGamesToUse(latestXGamesToUse: number): SystemBuilder;
    WithDifferenceForUpgradeSingle(differenceForUpgrade: number): SystemBuilder;
    WithDifferenceForUpgradeDouble(differenceForUpgrade: number): SystemBuilder;
    WithDifferenceForUpgradeMix(differenceForUpgrade: number): SystemBuilder;
    WithDifferenceForDowngradeSingle(differenceForDowngrade: number): SystemBuilder;
    WithDifferenceForDowngradeDouble(differenceForDowngrade: number): SystemBuilder;
    WithDifferenceForDowngradeMix(differenceForDowngrade: number): SystemBuilder;
    WithMaxLevelDownPerChange(maxLevelDownPerChange: number): SystemBuilder;
    WithGamesForInactivty(gamesForInactivty: number): SystemBuilder;
    WithrankingPlace(rankingPlace: RankingPlaceBuilder): SystemBuilder;
    WithrankingLastPlace(rankingPlace: RankingLastPlaceBuilder): SystemBuilder;
    AsPrimary(): SystemBuilder;
    WithId(id: string): SystemBuilder;
    Build(rebuild?: boolean): Promise<RankingSystem>;
}
