import { Model } from 'sequelize-typescript';
import { BelongsToGetAssociationMixin, BelongsToManyAddAssociationMixin, BelongsToManyAddAssociationsMixin, BelongsToManyCountAssociationsMixin, BelongsToManyGetAssociationsMixin, BelongsToManyHasAssociationMixin, BelongsToManyHasAssociationsMixin, BelongsToManyRemoveAssociationMixin, BelongsToManyRemoveAssociationsMixin, BelongsToManySetAssociationsMixin, BelongsToSetAssociationMixin, BuildOptions, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyCountAssociationsMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManySetAssociationsMixin } from 'sequelize';
import { EventTournament } from './event-tournament.model';
import { DrawTournament } from './draw-tournament.model';
import { RankingGroup } from '../../ranking';
import { GameType, SubEventTypeEnum } from '@badman/utils';
import { EventEntry } from '../entry.model';
import { Relation } from '../../../wrapper';
export declare class SubEventTournament extends Model {
    constructor(values?: Partial<SubEventTournament>, options?: BuildOptions);
    id: string;
    name?: string;
    eventType?: SubEventTypeEnum;
    gameType?: GameType;
    level?: number;
    visualCode?: string;
    rankingGroups?: Relation<RankingGroup[]>;
    drawTournaments?: Relation<DrawTournament[]>;
    event?: Relation<EventTournament>;
    eventId?: string;
    eventEntries?: Relation<EventEntry[]>;
    getRankingGroups: BelongsToManyGetAssociationsMixin<RankingGroup>;
    setRankingGroups: BelongsToManySetAssociationsMixin<RankingGroup, string>;
    addRankingGroups: BelongsToManyAddAssociationsMixin<RankingGroup, string>;
    addRankingGroup: BelongsToManyAddAssociationMixin<RankingGroup, string>;
    removeRankingGroup: BelongsToManyRemoveAssociationMixin<RankingGroup, string>;
    removeRankingGroups: BelongsToManyRemoveAssociationsMixin<RankingGroup, string>;
    hasRankingGroup: BelongsToManyHasAssociationMixin<RankingGroup, string>;
    hasRankingGroups: BelongsToManyHasAssociationsMixin<RankingGroup, string>;
    countRankingGroup: BelongsToManyCountAssociationsMixin;
    getDrawTournaments: HasManyGetAssociationsMixin<DrawTournament>;
    setDrawTournaments: HasManySetAssociationsMixin<DrawTournament, string>;
    addDrawTournaments: HasManyAddAssociationsMixin<DrawTournament, string>;
    addDrawTournament: HasManyAddAssociationMixin<DrawTournament, string>;
    removeDrawTournament: HasManyRemoveAssociationMixin<DrawTournament, string>;
    removeDrawTournaments: HasManyRemoveAssociationsMixin<DrawTournament, string>;
    hasDrawTournament: HasManyHasAssociationMixin<DrawTournament, string>;
    hasDrawTournaments: HasManyHasAssociationsMixin<DrawTournament, string>;
    countDrawTournaments: HasManyCountAssociationsMixin;
    getEvent: BelongsToGetAssociationMixin<EventTournament>;
    setEvent: BelongsToSetAssociationMixin<EventTournament, string>;
    getEventEntrys: HasManyGetAssociationsMixin<EventEntry>;
    setEventEntrys: HasManySetAssociationsMixin<EventEntry, string>;
    addEventEntrys: HasManyAddAssociationsMixin<EventEntry, string>;
    addEventEntry: HasManyAddAssociationMixin<EventEntry, string>;
    removeEventEntry: HasManyRemoveAssociationMixin<EventEntry, string>;
    removeEventEntrys: HasManyRemoveAssociationsMixin<EventEntry, string>;
    hasEventEntry: HasManyHasAssociationMixin<EventEntry, string>;
    hasEventEntrys: HasManyHasAssociationsMixin<EventEntry, string>;
    countEventEntrys: HasManyCountAssociationsMixin;
}
