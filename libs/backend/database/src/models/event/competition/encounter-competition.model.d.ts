import { BelongsToGetAssociationMixin, BelongsToSetAssociationMixin, BuildOptions, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyCountAssociationsMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManySetAssociationsMixin, HasOneGetAssociationMixin, HasOneSetAssociationMixin } from 'sequelize';
import { Model } from 'sequelize-typescript';
import { Relation } from '../../../wrapper';
import { Comment } from '../../comment.model';
import { Notification } from '../../personal';
import { Player } from '../../player.model';
import { Team } from '../../team.model';
import { Game } from '../game.model';
import { Assembly } from './assembly.model';
import { DrawCompetition } from './draw-competition.model';
import { EncounterChange } from './encounter-change';
import { Location } from '../location.model';
export declare class EncounterCompetition extends Model {
    constructor(values?: Partial<EncounterCompetition>, options?: BuildOptions);
    id: string;
    date?: Date;
    originalDate?: Date;
    games?: Relation<Game[]>;
    drawCompetition?: Relation<DrawCompetition>;
    drawId?: string;
    home?: Relation<Team>;
    homeScore: number;
    homeTeamId?: string;
    away?: Relation<Team>;
    awayScore: number;
    awayTeamId?: string;
    synced?: Date;
    visualCode?: string;
    gameLeader?: Relation<Player>;
    enteredBy?: Relation<Player>;
    acceptedBy?: Relation<Player>;
    enteredOn?: Date;
    acceptedOn?: Date;
    accepted?: boolean;
    shuttle?: string;
    startHour?: string;
    endHour?: string;
    encounterChange?: Relation<EncounterChange>;
    location?: Relation<Location>;
    locationId?: string;
    originalLocation?: Relation<Location>;
    originalLocationId?: string;
    notifications?: Relation<Notification[]>;
    assemblies?: Relation<Assembly[]>;
    homeComments?: Relation<Comment[]>;
    awayComments?: Relation<Comment[]>;
    homeCommentsChange?: Relation<Comment[]>;
    awayCommentsChange?: Relation<Comment[]>;
    getGames: HasManyGetAssociationsMixin<Game>;
    setGames: HasManySetAssociationsMixin<Game, string>;
    addGames: HasManyAddAssociationsMixin<Game, string>;
    addGame: HasManyAddAssociationMixin<Game, string>;
    removeGame: HasManyRemoveAssociationMixin<Game, string>;
    removeGames: HasManyRemoveAssociationsMixin<Game, string>;
    hasGame: HasManyHasAssociationMixin<Game, string>;
    hasGames: HasManyHasAssociationsMixin<Game, string>;
    countGames: HasManyCountAssociationsMixin;
    getDrawCompetition: BelongsToGetAssociationMixin<DrawCompetition>;
    setDrawCompetition: BelongsToSetAssociationMixin<DrawCompetition, string>;
    getHome: BelongsToGetAssociationMixin<Team>;
    setHome: BelongsToSetAssociationMixin<Team, string>;
    getAway: BelongsToGetAssociationMixin<Team>;
    setAway: BelongsToSetAssociationMixin<Team, string>;
    getEncounterChange: HasOneGetAssociationMixin<EncounterChange>;
    setEncounterChange: HasOneSetAssociationMixin<EncounterChange, string>;
    getLocation: BelongsToGetAssociationMixin<Location>;
    setLocation: BelongsToSetAssociationMixin<Location, string>;
    getGameLeader: BelongsToGetAssociationMixin<Player>;
    setGameLeader: BelongsToSetAssociationMixin<Player, string>;
    getAssemblies: HasManyGetAssociationsMixin<Assembly>;
    setAssemblies: HasManySetAssociationsMixin<Assembly, string>;
    addAssemblies: HasManyAddAssociationsMixin<Assembly, string>;
    addAssembly: HasManyAddAssociationMixin<Assembly, string>;
    removeAssemblie: HasManyRemoveAssociationMixin<Assembly, string>;
    removeAssemblies: HasManyRemoveAssociationsMixin<Assembly, string>;
    hasAssembly: HasManyHasAssociationMixin<Assembly, string>;
    hasAssemblies: HasManyHasAssociationsMixin<Assembly, string>;
    countAssemblies: HasManyCountAssociationsMixin;
    getHomeComments: HasManyGetAssociationsMixin<Comment>;
    setHomeComments: HasManySetAssociationsMixin<Comment, string>;
    addHomeComments: HasManyAddAssociationsMixin<Comment, string>;
    addHomeComment: HasManyAddAssociationMixin<Comment, string>;
    removeHomeComment: HasManyRemoveAssociationMixin<Comment, string>;
    removeHomeComments: HasManyRemoveAssociationsMixin<Comment, string>;
    hasHomeComment: HasManyHasAssociationMixin<Comment, string>;
    hasHomeComments: HasManyHasAssociationsMixin<Comment, string>;
    countHomeComments: HasManyCountAssociationsMixin;
    getAwayComments: HasManyGetAssociationsMixin<Comment>;
    setAwayComments: HasManySetAssociationsMixin<Comment, string>;
    addAwayComments: HasManyAddAssociationsMixin<Comment, string>;
    addAwayComment: HasManyAddAssociationMixin<Comment, string>;
    removeAwayComment: HasManyRemoveAssociationMixin<Comment, string>;
    removeAwayComments: HasManyRemoveAssociationsMixin<Comment, string>;
    hasAwayComment: HasManyHasAssociationMixin<Comment, string>;
    hasAwayComments: HasManyHasAssociationsMixin<Comment, string>;
    countAwayComments: HasManyCountAssociationsMixin;
    getHomeCommentsChanges: HasManyGetAssociationsMixin<Comment>;
    setHomeCommentsChanges: HasManySetAssociationsMixin<Comment, string>;
    addHomeCommentsChanges: HasManyAddAssociationsMixin<Comment, string>;
    addHomeCommentsChange: HasManyAddAssociationMixin<Comment, string>;
    removeHomeCommentsChange: HasManyRemoveAssociationMixin<Comment, string>;
    removeHomeCommentsChanges: HasManyRemoveAssociationsMixin<Comment, string>;
    hasHomeCommentsChange: HasManyHasAssociationMixin<Comment, string>;
    hasHomeCommentsChanges: HasManyHasAssociationsMixin<Comment, string>;
    countHomeCommentsChanges: HasManyCountAssociationsMixin;
    getAwayCommentsChanges: HasManyGetAssociationsMixin<Comment>;
    setAwayCommentsChanges: HasManySetAssociationsMixin<Comment, string>;
    addAwayCommentsChanges: HasManyAddAssociationsMixin<Comment, string>;
    addAwayCommentsChange: HasManyAddAssociationMixin<Comment, string>;
    removeAwayCommentsChange: HasManyRemoveAssociationMixin<Comment, string>;
    removeAwayCommentsChanges: HasManyRemoveAssociationsMixin<Comment, string>;
    hasAwayCommentsChange: HasManyHasAssociationMixin<Comment, string>;
    hasAwayCommentsChanges: HasManyHasAssociationsMixin<Comment, string>;
    countAwayCommentsChanges: HasManyCountAssociationsMixin;
}
