import { BelongsToGetAssociationMixin, BelongsToManyAddAssociationMixin, BelongsToManyAddAssociationsMixin, BelongsToManyCountAssociationsMixin, BelongsToManyGetAssociationsMixin, BelongsToManyHasAssociationMixin, BelongsToManyHasAssociationsMixin, BelongsToManyRemoveAssociationMixin, BelongsToManyRemoveAssociationsMixin, BelongsToManySetAssociationsMixin, BelongsToSetAssociationMixin, BuildOptions, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyCountAssociationsMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManySetAssociationsMixin } from 'sequelize';
import { Model } from 'sequelize-typescript';
import { SubEventTypeEnum } from '@badman/utils';
import { RankingGroup } from '../../ranking';
import { EventEntry } from '../entry.model';
import { DrawCompetition } from './draw-competition.model';
import { EventCompetition } from './event-competition.model';
import { Relation } from '../../../wrapper';
export declare class SubEventCompetition extends Model {
    constructor(values?: Partial<SubEventCompetition>, options?: BuildOptions);
    id: string;
    name: string;
    eventType: SubEventTypeEnum;
    level?: number;
    maxLevel?: number;
    minBaseIndex?: number;
    maxBaseIndex?: number;
    eventEntries?: Relation<EventEntry[]>;
    rankingGroups?: Relation<RankingGroup[]>;
    drawCompetitions?: Relation<DrawCompetition[]>;
    eventCompetition?: Relation<EventCompetition>;
    eventId: string;
    visualCode: string;
    getRankingGroups: BelongsToManyGetAssociationsMixin<RankingGroup>;
    setRankingGroups: BelongsToManySetAssociationsMixin<RankingGroup, string>;
    addRankingGroups: BelongsToManyAddAssociationsMixin<RankingGroup, string>;
    addRankingGroup: BelongsToManyAddAssociationMixin<RankingGroup, string>;
    removeRankingGroup: BelongsToManyRemoveAssociationMixin<RankingGroup, string>;
    removeRankingGroups: BelongsToManyRemoveAssociationsMixin<RankingGroup, string>;
    hasRankingGroup: BelongsToManyHasAssociationMixin<RankingGroup, string>;
    hasRankingGroups: BelongsToManyHasAssociationsMixin<RankingGroup, string>;
    countRankingGroup: BelongsToManyCountAssociationsMixin;
    getEventEntries: HasManyGetAssociationsMixin<EventEntry>;
    setEventEntries: HasManySetAssociationsMixin<EventEntry, string>;
    addEventEntries: HasManyAddAssociationsMixin<EventEntry, string>;
    addEventEntry: HasManyAddAssociationMixin<EventEntry, string>;
    removeEventEntry: HasManyRemoveAssociationMixin<EventEntry, string>;
    removeEventEntries: HasManyRemoveAssociationsMixin<EventEntry, string>;
    hasEventEntry: HasManyHasAssociationMixin<EventEntry, string>;
    hasEventEntries: HasManyHasAssociationsMixin<EventEntry, string>;
    countEventEntries: HasManyCountAssociationsMixin;
    getDrawCompetitions: HasManyGetAssociationsMixin<DrawCompetition>;
    setDrawCompetitions: HasManySetAssociationsMixin<DrawCompetition, string>;
    addDrawCompetitions: HasManyAddAssociationsMixin<DrawCompetition, string>;
    addDrawCompetition: HasManyAddAssociationMixin<DrawCompetition, string>;
    removeDrawCompetition: HasManyRemoveAssociationMixin<DrawCompetition, string>;
    removeDrawCompetitions: HasManyRemoveAssociationsMixin<DrawCompetition, string>;
    hasDrawCompetition: HasManyHasAssociationMixin<DrawCompetition, string>;
    hasDrawCompetitions: HasManyHasAssociationsMixin<DrawCompetition, string>;
    countDrawCompetitions: HasManyCountAssociationsMixin;
    getEventCompetition: BelongsToGetAssociationMixin<EventCompetition>;
    setEventCompetition: BelongsToSetAssociationMixin<EventCompetition, string>;
}
export declare class SubEventCompetitionAverageLevel {
    gender: 'M' | 'F';
    single?: number;
    singleCount?: number;
    double?: number;
    doubleCount?: number;
    mix?: number;
    mixCount?: number;
}
