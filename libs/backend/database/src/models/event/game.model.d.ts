import { BelongsToGetAssociationMixin, BelongsToManyAddAssociationMixin, BelongsToManyAddAssociationsMixin, BelongsToManyCountAssociationsMixin, BelongsToManyGetAssociationsMixin, BelongsToManyHasAssociationMixin, BelongsToManyHasAssociationsMixin, BelongsToManyRemoveAssociationMixin, BelongsToManyRemoveAssociationsMixin, BelongsToManySetAssociationsMixin, BelongsToSetAssociationMixin, BuildOptions, CreateOptions, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyCountAssociationsMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManySetAssociationsMixin, UpdateOptions } from 'sequelize';
import { Model } from 'sequelize-typescript';
import { GameStatus, GameType } from '@badman/utils';
import { Player } from '../player.model';
import { RankingPoint } from '../ranking';
import { EncounterCompetition } from './competition/encounter-competition.model';
import { Court } from './court.model';
import { GamePlayerMembership } from './game-player.model';
import { DrawTournament } from './tournament';
import { Relation } from '../../wrapper';
export declare class Game extends Model {
    constructor(values?: Partial<Game>, options?: BuildOptions);
    id: string;
    playedAt?: Date;
    gameType?: GameType;
    status?: GameStatus;
    set1Team1?: number;
    set1Team2?: number;
    set2Team1?: number;
    set2Team2?: number;
    set3Team1?: number;
    set3Team2?: number;
    winner?: number;
    order?: number;
    round?: string;
    rankingPoints?: RankingPoint[];
    tournament?: Relation<DrawTournament>;
    competition?: Relation<EncounterCompetition>;
    linkId?: string;
    linkType?: string;
    court?: Relation<Court>;
    courtId?: string;
    visualCode?: string;
    players?: (Player & {
        GamePlayerMembership: GamePlayerMembership;
    })[];
    static gameCreatedOrUpdated(instance: Game, options: CreateOptions | UpdateOptions): Promise<void>;
    static gamesCreatedOrUpdated(instances: Game[], options: CreateOptions | UpdateOptions): Promise<void>;
    static onUpdate(game: Game, options: CreateOptions | UpdateOptions): Promise<void>;
    static updateEncounterScore(encounter: EncounterCompetition, options: CreateOptions | UpdateOptions): Promise<void>;
    getRankingPoints: HasManyGetAssociationsMixin<RankingPoint>;
    setRankingPoints: HasManySetAssociationsMixin<RankingPoint, string>;
    addRankingPoints: HasManyAddAssociationsMixin<RankingPoint, string>;
    addRankingPoint: HasManyAddAssociationMixin<RankingPoint, string>;
    removeRankingPoint: HasManyRemoveAssociationMixin<RankingPoint, string>;
    removeRankingPoints: HasManyRemoveAssociationsMixin<RankingPoint, string>;
    hasRankingPoint: HasManyHasAssociationMixin<RankingPoint, string>;
    hasRankingPoints: HasManyHasAssociationsMixin<RankingPoint, string>;
    countRankingPoints: HasManyCountAssociationsMixin;
    getTournament: BelongsToGetAssociationMixin<DrawTournament>;
    setTournament: BelongsToSetAssociationMixin<DrawTournament, string>;
    getCompetition: BelongsToGetAssociationMixin<EncounterCompetition>;
    setCompetition: BelongsToSetAssociationMixin<EncounterCompetition, string>;
    getCourt: BelongsToGetAssociationMixin<Court>;
    setCourt: BelongsToSetAssociationMixin<Court, string>;
    getPlayers: BelongsToManyGetAssociationsMixin<Player>;
    setPlayers: BelongsToManySetAssociationsMixin<Player, string>;
    addPlayers: BelongsToManyAddAssociationsMixin<Player, string>;
    addPlayer: BelongsToManyAddAssociationMixin<Player, string>;
    removePlayer: BelongsToManyRemoveAssociationMixin<Player, string>;
    removePlayers: BelongsToManyRemoveAssociationsMixin<Player, string>;
    hasPlayer: BelongsToManyHasAssociationMixin<Player, string>;
    hasPlayers: BelongsToManyHasAssociationsMixin<Player, string>;
    countPlayer: BelongsToManyCountAssociationsMixin;
}
