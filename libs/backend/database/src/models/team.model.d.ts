import { SubEventTypeEnum } from '@badman/utils';
import { BelongsToGetAssociationMixin, BelongsToManyAddAssociationMixin, BelongsToManyAddAssociationsMixin, BelongsToManyCountAssociationsMixin, BelongsToManyGetAssociationsMixin, BelongsToManyHasAssociationMixin, BelongsToManyHasAssociationsMixin, BelongsToManyRemoveAssociationMixin, BelongsToManyRemoveAssociationsMixin, BelongsToManySetAssociationsMixin, BelongsToSetAssociationMixin, CreateOptions, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyCountAssociationsMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManySetAssociationsMixin, HasOneGetAssociationMixin, HasOneSetAssociationMixin } from 'sequelize';
import { Model } from 'sequelize-typescript';
import { Slugify } from '../types';
import { Relation } from '../wrapper';
import { Club } from './club.model';
import { EncounterCompetition, EventEntry, EventEntryNewInput, EventEntryUpdateInput, Location, SubEventCompetition } from './event';
import { Player, PlayerTeamInput } from './player.model';
import { Role } from './security';
import { TeamPlayerMembership } from './team-player-membership.model';
export declare class Team extends Model {
    id: string;
    name?: string;
    season?: number;
    preferredTime?: Date;
    link: string;
    preferredDay?: string;
    locations?: Relation<Location[]>;
    abbreviation?: string;
    entry?: Relation<EventEntry>;
    club?: Relation<Club>;
    clubId?: string;
    slug?: string;
    players?: (Player & {
        TeamPlayerMembership: TeamPlayerMembership;
    })[];
    type: SubEventTypeEnum;
    captain?: Relation<Player>;
    captainId?: string;
    email?: string;
    phone?: string;
    teamNumber: number;
    homeEncounters?: Relation<EncounterCompetition>;
    awayEncounters?: Relation<EncounterCompetition>;
    roles?: Relation<Role[]>;
    static setAbbriviations(instances: Team[], options: CreateOptions): Promise<void>;
    static setAbbriviation(instance: Team, options: CreateOptions): Promise<void>;
    static generateName(instance: Team, options?: CreateOptions, club?: Club): Promise<void>;
    static generateAbbreviation(instance: Team, options?: CreateOptions, club?: Club): Promise<void>;
    regenerateSlug: Slugify<Team>;
    getClub: BelongsToGetAssociationMixin<Club>;
    setClub: BelongsToSetAssociationMixin<Club, string>;
    getPlayers: BelongsToManyGetAssociationsMixin<Player>;
    setPlayer: BelongsToManySetAssociationsMixin<Player, string>;
    addPlayers: BelongsToManyAddAssociationsMixin<Player, string>;
    addPlayer: BelongsToManyAddAssociationMixin<Player, string>;
    removePlayer: BelongsToManyRemoveAssociationMixin<Player, string>;
    removePlayers: BelongsToManyRemoveAssociationsMixin<Player, string>;
    hasPlayer: BelongsToManyHasAssociationMixin<Player, string>;
    hasPlayers: BelongsToManyHasAssociationsMixin<Player, string>;
    countPlayer: BelongsToManyCountAssociationsMixin;
    getSubEvents: BelongsToManyGetAssociationsMixin<SubEventCompetition>;
    setSubEvents: BelongsToManySetAssociationsMixin<SubEventCompetition, string>;
    addSubEvents: BelongsToManyAddAssociationsMixin<SubEventCompetition, string>;
    addSubEvent: BelongsToManyAddAssociationMixin<SubEventCompetition, string>;
    removeSubEvent: BelongsToManyRemoveAssociationMixin<SubEventCompetition, string>;
    removeSubEvents: BelongsToManyRemoveAssociationsMixin<SubEventCompetition, string>;
    hasSubEvent: BelongsToManyHasAssociationMixin<SubEventCompetition, string>;
    hasSubEvents: BelongsToManyHasAssociationsMixin<SubEventCompetition, string>;
    countSubEvent: BelongsToManyCountAssociationsMixin;
    getHomeEncounters: HasManyGetAssociationsMixin<EncounterCompetition>;
    setHomeEncounters: HasManySetAssociationsMixin<EncounterCompetition, string>;
    addHomeEncounters: HasManyAddAssociationsMixin<EncounterCompetition, string>;
    addHomeEncounter: HasManyAddAssociationMixin<EncounterCompetition, string>;
    removeHomeEncounter: HasManyRemoveAssociationMixin<EncounterCompetition, string>;
    removeHomeEncounters: HasManyRemoveAssociationsMixin<EncounterCompetition, string>;
    hasHomeEncounter: HasManyHasAssociationMixin<EncounterCompetition, string>;
    hasHomeEncounters: HasManyHasAssociationsMixin<EncounterCompetition, string>;
    countHomeEncounters: HasManyCountAssociationsMixin;
    getAwayEncounters: HasManyGetAssociationsMixin<EncounterCompetition>;
    setAwayEncounters: HasManySetAssociationsMixin<EncounterCompetition, string>;
    addAwayEncounters: HasManyAddAssociationsMixin<EncounterCompetition, string>;
    addAwayEncounter: HasManyAddAssociationMixin<EncounterCompetition, string>;
    removeAwayEncounter: HasManyRemoveAssociationMixin<EncounterCompetition, string>;
    removeAwayEncounters: HasManyRemoveAssociationsMixin<EncounterCompetition, string>;
    hasAwayEncounter: HasManyHasAssociationMixin<EncounterCompetition, string>;
    hasAwayEncounters: HasManyHasAssociationsMixin<EncounterCompetition, string>;
    countAwayEncounters: HasManyCountAssociationsMixin;
    getLocations: BelongsToManyGetAssociationsMixin<Location>;
    setLocations: BelongsToManySetAssociationsMixin<Location, string>;
    addLocations: BelongsToManyAddAssociationsMixin<Location, string>;
    addLocation: BelongsToManyAddAssociationMixin<Location, string>;
    removeLocation: BelongsToManyRemoveAssociationMixin<Location, string>;
    removeLocations: BelongsToManyRemoveAssociationsMixin<Location, string>;
    hasLocation: BelongsToManyHasAssociationMixin<Location, string>;
    hasLocations: BelongsToManyHasAssociationsMixin<Location, string>;
    countLocation: BelongsToManyCountAssociationsMixin;
    getCaptain: BelongsToGetAssociationMixin<Player>;
    setCaptain: BelongsToSetAssociationMixin<Player, string>;
    getEntry: HasOneGetAssociationMixin<EventEntry>;
    setEntry: HasOneSetAssociationMixin<EventEntry, string>;
    getRoles: HasManyGetAssociationsMixin<Role>;
    setRoles: HasManySetAssociationsMixin<Role, string>;
    addRoles: HasManyAddAssociationsMixin<Role, string>;
    addRole: HasManyAddAssociationMixin<Role, string>;
    removeRole: HasManyRemoveAssociationMixin<Role, string>;
    removeRoles: HasManyRemoveAssociationsMixin<Role, string>;
    hasRole: HasManyHasAssociationMixin<Role, string>;
    hasRoles: HasManyHasAssociationsMixin<Role, string>;
    countRoles: HasManyCountAssociationsMixin;
}
declare const TeamUpdateInput_base: import("@nestjs/common").Type<Partial<Omit<Team, "players" | "createdAt" | "updatedAt" | "club" | "roles" | "entry" | "captain">>>;
export declare class TeamUpdateInput extends TeamUpdateInput_base {
    entry?: EventEntryUpdateInput;
    players?: PlayerTeamInput[];
}
declare const TeamNewInput_base: import("@nestjs/common").Type<Partial<Omit<TeamUpdateInput, "players" | "id" | "entry">>>;
export declare class TeamNewInput extends TeamNewInput_base {
    entry?: EventEntryNewInput;
    players?: PlayerTeamInput[];
}
export {};
