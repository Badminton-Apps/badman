import { UseForTeamName } from '@badman/utils';
import { BelongsToManyAddAssociationMixin, BelongsToManyAddAssociationsMixin, BelongsToManyCountAssociationsMixin, BelongsToManyGetAssociationsMixin, BelongsToManyHasAssociationMixin, BelongsToManyHasAssociationsMixin, BelongsToManyRemoveAssociationMixin, BelongsToManyRemoveAssociationsMixin, BelongsToManySetAssociationsMixin, BuildOptions, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyCountAssociationsMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManySetAssociationsMixin, SaveOptions } from 'sequelize';
import { Model } from 'sequelize-typescript';
import { Slugify } from '../types';
import { Comment } from './comment.model';
import { Location } from './event';
import { Player } from './player.model';
import { Role } from './security';
import { Team } from './team.model';
import { Relation } from '../wrapper';
export declare class Club extends Model {
    constructor(values?: Partial<Club>, options?: BuildOptions);
    id: string;
    name?: string;
    fullName?: string;
    useForTeamName?: UseForTeamName;
    abbreviation?: string;
    clubId?: number;
    teams?: Relation<Team[]>;
    roles?: Relation<Role[]>;
    players?: Relation<Player[]>;
    comments?: Relation<Comment[]>;
    locations?: Relation<Location[]>;
    slug?: string;
    state?: string;
    country?: string;
    regenerateSlug: Slugify<Club>;
    static setAbbriviation(instance: Club): void;
    static setAbbriviations(instances: Club[]): void;
    static setTeamName(instance: Club, options: SaveOptions): Promise<void>;
    static setTeamNames(instances: Club[], options: SaveOptions): Promise<void>;
    static createBaseRole(instance: Club, options: SaveOptions): Promise<void>;
    static createBaseRoles(instances: Club[], options: SaveOptions): Promise<void>;
    getPlayers: BelongsToManyGetAssociationsMixin<Player>;
    setPlayer: BelongsToManySetAssociationsMixin<Player, string>;
    addPlayers: BelongsToManyAddAssociationsMixin<Player, string>;
    addPlayer: BelongsToManyAddAssociationMixin<Player, string>;
    removePlayer: BelongsToManyRemoveAssociationMixin<Player, string>;
    removePlayers: BelongsToManyRemoveAssociationsMixin<Player, string>;
    hasPlayer: BelongsToManyHasAssociationMixin<Player, string>;
    hasPlayers: BelongsToManyHasAssociationsMixin<Player, string>;
    countPlayer: BelongsToManyCountAssociationsMixin;
    getLocations: HasManyGetAssociationsMixin<Location>;
    setLocations: HasManySetAssociationsMixin<Location, string>;
    addLocations: HasManyAddAssociationsMixin<Location, string>;
    addLocation: HasManyAddAssociationMixin<Location, string>;
    removeLocation: HasManyRemoveAssociationMixin<Location, string>;
    removeLocations: HasManyRemoveAssociationsMixin<Location, string>;
    hasLocation: HasManyHasAssociationMixin<Location, string>;
    hasLocations: HasManyHasAssociationsMixin<Location, string>;
    countLocations: HasManyCountAssociationsMixin;
    getRoles: HasManyGetAssociationsMixin<Role>;
    setRoles: HasManySetAssociationsMixin<Role, string>;
    addRoles: HasManyAddAssociationsMixin<Role, string>;
    addRole: HasManyAddAssociationMixin<Role, string>;
    removeRole: HasManyRemoveAssociationMixin<Role, string>;
    removeRoles: HasManyRemoveAssociationsMixin<Role, string>;
    hasRole: HasManyHasAssociationMixin<Role, string>;
    hasRoles: HasManyHasAssociationsMixin<Role, string>;
    countRoles: HasManyCountAssociationsMixin;
    getTeams: HasManyGetAssociationsMixin<Team>;
    setTeams: HasManySetAssociationsMixin<Team, string>;
    addTeams: HasManyAddAssociationsMixin<Team, string>;
    addTeam: HasManyAddAssociationMixin<Team, string>;
    removeTeam: HasManyRemoveAssociationMixin<Team, string>;
    removeTeams: HasManyRemoveAssociationsMixin<Team, string>;
    hasTeam: HasManyHasAssociationMixin<Team, string>;
    hasTeams: HasManyHasAssociationsMixin<Team, string>;
    countTeams: HasManyCountAssociationsMixin;
    getComments: HasManyGetAssociationsMixin<Comment>;
    setComments: HasManySetAssociationsMixin<Comment, string>;
    addComments: HasManyAddAssociationsMixin<Comment, string>;
    addComment: HasManyAddAssociationMixin<Comment, string>;
    removeComment: HasManyRemoveAssociationMixin<Comment, string>;
    removeComments: HasManyRemoveAssociationsMixin<Comment, string>;
    hasComment: HasManyHasAssociationMixin<Comment, string>;
    hasComments: HasManyHasAssociationsMixin<Comment, string>;
    countComments: HasManyCountAssociationsMixin;
}
declare const ClubUpdateInput_base: import("@nestjs/common").Type<Partial<Omit<Club, "players" | "createdAt" | "updatedAt" | "teams" | "comments" | "roles" | "locations">>>;
export declare class ClubUpdateInput extends ClubUpdateInput_base {
}
declare const ClubNewInput_base: import("@nestjs/common").Type<Partial<Omit<ClubUpdateInput, "id">>>;
export declare class ClubNewInput extends ClubNewInput_base {
}
export {};
