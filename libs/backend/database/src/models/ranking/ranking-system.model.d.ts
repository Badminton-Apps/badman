import { BelongsToManyAddAssociationMixin, BelongsToManyAddAssociationsMixin, BelongsToManyCountAssociationsMixin, BelongsToManyGetAssociationsMixin, BelongsToManyHasAssociationMixin, BelongsToManyHasAssociationsMixin, BelongsToManyRemoveAssociationMixin, BelongsToManyRemoveAssociationsMixin, BelongsToManySetAssociationsMixin, BuildOptions, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyCountAssociationsMixin, HasManyGetAssociationsMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManySetAssociationsMixin } from 'sequelize';
import { Model } from 'sequelize-typescript';
import { RankingSystems, RankingTiming, StartingType } from '@badman/utils';
import { RankingGroup } from './ranking-group.model';
import { RankingLastPlace } from './ranking-last-place.model';
import { RankingPlace } from './ranking-place.model';
import { RankingPoint } from './ranking-point.model';
import { Relation } from '../../wrapper';
export declare class RankingSystem extends Model {
    constructor(values?: Partial<RankingSystem>, options?: BuildOptions);
    id: string;
    name?: string;
    amountOfLevels: number;
    procentWinning: number;
    procentWinningPlus1: number;
    procentLosing: number;
    minNumberOfGamesUsedForUpgrade?: number;
    minNumberOfGamesUsedForDowngrade?: number;
    maxDiffLevels?: number;
    maxDiffLevelsHighest?: number;
    latestXGamesToUse?: number;
    maxLevelUpPerChange?: number;
    maxLevelDownPerChange?: number;
    gamesForInactivty?: number;
    inactivityAmount?: number;
    inactivityUnit?: 'months' | 'weeks' | 'days';
    inactiveBehavior?: 'freeze' | 'decrease';
    get inactivity(): RankingTiming;
    calculationLastUpdate?: Date;
    calculationDayOfWeek?: number;
    calculationIntervalAmount?: number;
    calculationIntervalUnit?: 'months' | 'weeks' | 'days';
    get calculationInterval(): RankingTiming;
    periodAmount?: number;
    periodUnit?: 'months' | 'weeks' | 'days';
    get period(): RankingTiming;
    updateLastUpdate?: Date;
    updateDayOfWeek?: number;
    updateIntervalAmount?: number;
    updateIntervalUnit?: 'months' | 'weeks' | 'days';
    get updateInterval(): RankingTiming;
    rankingSystem?: RankingSystems;
    primary: boolean;
    calculateUpdates: boolean;
    runCurrently?: boolean;
    differenceForUpgradeSingle?: number;
    differenceForUpgradeDouble?: number;
    differenceForUpgradeMix?: number;
    differenceForDowngradeSingle?: number;
    differenceForDowngradeDouble?: number;
    differenceForDowngradeMix?: number;
    startingType?: StartingType;
    rankingPoints?: Relation<RankingPoint>;
    places?: Relation<RankingPlace>;
    lastPlaces?: Relation<RankingLastPlace>;
    rankingGroups?: Relation<RankingGroup[]>;
    getRankingPoints: HasManyGetAssociationsMixin<RankingPoint>;
    setRankingPoints: HasManySetAssociationsMixin<RankingPoint, string>;
    addRankingPoints: HasManyAddAssociationsMixin<RankingPoint, string>;
    addRankingPoint: HasManyAddAssociationMixin<RankingPoint, string>;
    removeRankingPoint: HasManyRemoveAssociationMixin<RankingPoint, string>;
    removeRankingPoints: HasManyRemoveAssociationsMixin<RankingPoint, string>;
    hasRankingPoint: HasManyHasAssociationMixin<RankingPoint, string>;
    hasRankingPoints: HasManyHasAssociationsMixin<RankingPoint, string>;
    countRankingPoints: HasManyCountAssociationsMixin;
    getRankingPlaces: HasManyGetAssociationsMixin<RankingPlace>;
    setRankingPlaces: HasManySetAssociationsMixin<RankingPlace, string>;
    addRankingPlaces: HasManyAddAssociationsMixin<RankingPlace, string>;
    addRankingPlace: HasManyAddAssociationMixin<RankingPlace, string>;
    removeRankingPlace: HasManyRemoveAssociationMixin<RankingPlace, string>;
    removeRankingPlaces: HasManyRemoveAssociationsMixin<RankingPlace, string>;
    hasRankingPlace: HasManyHasAssociationMixin<RankingPlace, string>;
    hasRankingPlaces: HasManyHasAssociationsMixin<RankingPlace, string>;
    countRankingPlaces: HasManyCountAssociationsMixin;
    getRankingGroups: BelongsToManyGetAssociationsMixin<RankingGroup>;
    setRankingGroups: BelongsToManySetAssociationsMixin<RankingGroup, string>;
    addRankingGroups: BelongsToManyAddAssociationsMixin<RankingGroup, string>;
    addRankingGroup: BelongsToManyAddAssociationMixin<RankingGroup, string>;
    removeRankingGroup: BelongsToManyRemoveAssociationMixin<RankingGroup, string>;
    removeRankingGroups: BelongsToManyRemoveAssociationsMixin<RankingGroup, string>;
    hasRankingGroup: BelongsToManyHasAssociationMixin<RankingGroup, string>;
    hasRankingGroups: BelongsToManyHasAssociationsMixin<RankingGroup, string>;
    countRankingGroup: BelongsToManyCountAssociationsMixin;
    getLastPlaces: HasManyGetAssociationsMixin<RankingLastPlace>;
    setLastPlaces: HasManySetAssociationsMixin<RankingLastPlace, string>;
    addLastPlaces: HasManyAddAssociationsMixin<RankingLastPlace, string>;
    addLastPlace: HasManyAddAssociationMixin<RankingLastPlace, string>;
    removeLastPlace: HasManyRemoveAssociationMixin<RankingLastPlace, string>;
    removeLastPlaces: HasManyRemoveAssociationsMixin<RankingLastPlace, string>;
    hasLastPlace: HasManyHasAssociationMixin<RankingLastPlace, string>;
    hasLastPlaces: HasManyHasAssociationsMixin<RankingLastPlace, string>;
    countLastPlaces: HasManyCountAssociationsMixin;
    private _pointsToGoUp;
    private _pointsWhenWinningAgainst;
    private _pointsToGoDown;
    private _levelArray;
    private _levelArrayOneMinus;
    get pointsToGoUp(): number[];
    get pointsWhenWinningAgainst(): number[];
    get pointsToGoDown(): number[];
    get levelArray(): number[];
    get levelArrayOneMinus(): number[];
    private _setupValues;
    private _bvlCaps;
    private _lfbbCaps;
    private _originalCaps;
}
declare const RankingSystemUpdateInput_base: import("@nestjs/common").Type<Partial<Omit<RankingSystem, "createdAt" | "updatedAt">>>;
export declare class RankingSystemUpdateInput extends RankingSystemUpdateInput_base {
}
declare const RankingSystemNewInput_base: import("@nestjs/common").Type<Partial<Omit<RankingSystemUpdateInput, "id">>>;
export declare class RankingSystemNewInput extends RankingSystemNewInput_base {
}
export {};
