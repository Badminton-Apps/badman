// info: https://material.angular.io/guide/theming-your-components

@use 'sass:map';
@use '@angular/material' as mat;
@use './components/assembly/assembly.component.theme' as assembly;
@use './components/team-assembly-player/team-assembly-player.component.theme' as
  team-assembly-player;

@mixin color($theme) {
  @include assembly.color($theme);
  @include team-assembly-player.color($theme);

  badman-assembly-create {
    $color-config: mat.get-color-config($theme);

    $foreground: map.get($color-config, 'foreground');
    $border-color: mat.get-color-from-palette($foreground, 'disabled-text');

    .download {
      button {
        border-color: $border-color;

        &.mat-mdc-icon-button span.mat-mdc-button-persistent-ripple {
          border-radius: 0px;
        }
      }
    }
  }
}

@mixin typography($theme) {
  @include assembly.typography($theme);
  @include team-assembly-player.typography($theme);

  badman-assembly-create {
    $typography-config: mat.get-typography-config($theme);

    h1 {
      @include mat.typography-level($typography-config, 'headline-4');
    }

    .download {
      .last-saved {
        @include mat.typography-level($typography_config, 'caption');
      }
    }
  }
}

@mixin theme($theme) {
  @include assembly.theme($theme);
  @include team-assembly-player.theme($theme);

  // Only apply theme on the correct element
  $color-config: mat.get-color-config($theme);
  @if $color-config != null {
    @include color($theme);
  }

  $typography-config: mat.get-typography-config($theme);
  @if $typography-config != null {
    @include typography($theme);
  }
}
