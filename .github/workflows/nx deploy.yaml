# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI

on:
  workflow_dispatch:
  pull_request:
    branches: [main]

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  NX_BRANCH: ${{ github.event.number || github.ref }}
  NX_RUN_GROUP: ${{ github.run_id }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}

jobs:
  base:
    defaults:
      run:
        working-directory: ./code
    runs-on: ubuntu-latest
    outputs:
      base: ${{ steps.tag.outputs.base }}
    steps:
      - name: Checkout [main]
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: tag
        run: |
          TAG_VERSION=$(git describe --match 'v*' --abbrev=0 --tags $(git rev-list --tags --max-count=1))
          echo "Found tag: $TAG_VERSION"
          LAST_TAG_HASH=$(git rev-list -n 1 $TAG_VERSION)
          echo "Found hash: $LAST_TAG_HASH"
          echo "::set-output name=base::$LAST_TAG_HASH"
      - uses: actions/setup-node@v2
        with:
          node-version: '17.9.0'
          cache: 'yarn'
          cache-dependency-path: code/yarn.lock
      - run: yarn install --frozen-lockfile --prefer-offline

  agents:
    name: Agent ${{ matrix.agent }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        working-directory: ./code
    strategy:
      matrix:
        agent: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: '17.9.0'
          cache: 'yarn'
          cache-dependency-path: code/yarn.lock
      - run: yarn install --frozen-lockfile --prefer-offline
      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent

  main:
    defaults:
      run:
        working-directory: ./code
    runs-on: ubuntu-latest
    needs: base
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout [main]
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '17.9.0'
          cache: 'yarn'
          cache-dependency-path: code/yarn.lock
      - run: yarn install --frozen-lockfile --prefer-offline
      - run: npx nx-cloud start-ci-run
      - run: npx nx affected --target=build --base=${{ needs.base.outputs.base }} --head=origin/main
      - run: npx nx affected --target=lint  --base=${{ needs.base.outputs.base }} --head=origin/main
      - run: npx nx affected --target=test  --code-coverage --base=${{ needs.base.outputs.base }} --head=origin/main
      - name: Standard Version
        run: |
          git config --global user.email "info@badman.app"
          git config --global user.name "Badman Releaser"
          git config advice.ignoredHook false
          yarn run standard-version -- --base=${{ needs.base.outputs.base }} --head=origin/main
        env:
          NX_CLOUD_DISTRIBUTED_EXECUTION: false
      - run: npx nx-cloud stop-all-agents
        if: always()
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          body: ${{ env.changelog  }}

  pr:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./code
    if: ${{ github.event_name == 'pull_request' }}
    needs: base
    steps:
      - name: Checkout [pr]
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '17.9.0'
          cache: 'yarn'
          cache-dependency-path: code/yarn.lock
      - run: yarn install --frozen-lockfile --prefer-offline
      - run: npx nx-cloud start-ci-run
      - run: npx nx affected --target=build --base=${{ needs.base.outputs.base }} --head=origin/main
      - run: npx nx affected --target=lint  --base=${{ needs.base.outputs.base }} --head=origin/main
      - run: npx nx affected --target=test  --code-coverage --base=${{ needs.base.outputs.base }} --head=origin/main
      - run: npx nx-cloud stop-all-agents
        if: always()

  docker-build:
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - main
      - base
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./code
    env:
      NX_CLOUD_DISTRIBUTED_EXECUTION: false
      INPUT_PUSH: true
      GKE_CREDENTIALS: ${{ secrets.GKE_CREDENTIALS }}
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: badman
      GKE_ZONE: europe-west1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checkout latest release tag
        run: |
          LATEST_TAG=$(git describe --match 'v*' --abbrev=0 --tags $(git rev-list --tags --max-count=1))
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: ${{env.LATEST_TAG}}
      - id: 'auth'
        uses: 'google-github-actions/auth@v0.8.0'
        with:
          credentials_json: '${{ env.GKE_CREDENTIALS }}'

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0.8.0'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: c-hive/gha-yarn-cache@v2
        with:
          directory: ./code
      - run: yarn install --frozen-lockfile
      - run: npx nx affected --target=build --base=${{ needs.base.outputs.base }} --head=origin/main
      - run: npx nx affected --target=docker --base=${{ needs.base.outputs.base }} --head=origin/main
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TAGS: ${{env.LATEST_TAG}},latest
      - run: npx nx affected --target=deploy --base=${{ needs.base.outputs.base }} --head=origin/main
