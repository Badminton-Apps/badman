name: Main Branch Workflow

on:
  # manual trigger
  workflow_dispatch:
    inputs:
      # main branch name
      prod-release:
        description: 'Do prod release'
        required: true
        default: false
        type: boolean

env:
  NODE_ENV: '20.1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  main:
    name: Nx Cloud - Main Job
    uses: ./.github/workflows/nx-cloud-main.yml
    secrets:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    with:
      number-of-agents: 3
      main-branch-name: ${{ inputs.prod-release && 'main' || 'develop' }}
      output-affected-projects: true
      parallel-commands: |
        npx nx-cloud record -- npx nx workspace-lint
      parallel-commands-on-agents: |
        npx nx affected --target=build --parallel=3
        npx nx affected --target=lint --parallel=3
        npx nx affected --target=test --parallel=3 --ci --code-coverage
        # npx nx affected --target=server

  agents:
    name: Nx Cloud - Agents
    uses: ./.github/workflows/nx-cloud-agents.yml
    secrets:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    with:
      number-of-agents: 3

  Release:
    runs-on: ubuntu-latest
    needs: [main]
    if: ${{ needs.main.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.prod-release && 'main' || 'develop' }}
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_ENV }}

      - name: install dependencies for release
        run: npm --prefix \scripts instal

      - name: Create release
        run: |
          git config --global user.email "info@badman.app"
          git config --global user.name "Badman Releaser"
          git config advice.ignoredHook false

          # if the prod release is false, then we want to create a beta release by appending --beta to the command
          npm run --prefix \scripts create-release --  ${{ inputs.prod-release && '' || '--beta' }}  --affected="${{ needs.main.outputs.affectedProjects }}"

      - name: Create Github Release
        uses: actions/create-release@v1
        if: ${{ inputs.prod-release }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          body: ${{ env.changelog  }}
      
      - name: Sync main with develop
        if: ${{ inputs.prod-release }}
        run: |
          git config --global user.email "info@badman.app"
          git config --global user.name "Badman Releaser"
          git config advice.ignoredHook false
          git checkout main
          git merge develop
          git push origin main

      - name: Trigger deploy hooks on Render.com (if affected)
        run: |
          # read the affected projects from the main job
          affectedProjects=$(echo ${{ needs.main.outputs.affectedProjects }} | tr -d ' ')

          # check if the affected projects contains api
          if [[ $affectedProjects == *"api"* ]]; then
            curl -X POST -H "Content-Type: application/json" ${{ inputs.prod-release && secrets.PROD_API_HOOK  || secrets.BETA_API_HOOK }}
          fi

          # check if the affected projects contains worker-sync
          if [[ $affectedProjects == *"worker-sync"* ]]; then
            curl -X POST -H "Content-Type: application/json" ${{ inputs.prod-release && secrets.PROD_WORKER_SYNC_HOOK  || secrets.BETA_WORKER_SYNC_HOOK }}
          fi
      
      
      ## Vercel deploys automatically on push to branch with Chore: prefix

      # - name: Trigger deploy hook on Vercel.com (if affected)
      #   run: |
      #     # read the affected projects from the main job
      #     affectedProjects=$(echo ${{ needs.main.outputs.affectedProjects }} | tr -d ' ')

      #     # check if the affected projects contains api
      #     if [[ $affectedProjects == *"badman"* ]]; then
      #       curl -X POST -H "Content-Type: application/json" ${{ inputs.prod-release && secrets.PROD_CLIENT_HOOK  || secrets.BETA_CLIENT_HOOK }}
      #     fi
