version: '3'
services:
  # Databases
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - '5432:5432'
    networks:
      - api
      - postgres
    volumes:
      - db-data:/var/lib/postgresql/data

  redis:
    image: 'redis:alpine'
    ports:
      - '6379:6379'
    networks:
      - api
     
  # My Apps
  badman:
    build:
      context: .
      dockerfile: apps/badman/Dockerfile.dev
    image: badman-dev
    environment:
      - API_URL=http://api:5000
    expose:
      - 4200
    ports:
      - 4200:4200
    depends_on:
      - api
    volumes:
      - ./:/usr/src
      - ./user/src/node_modules
    restart: unless-stopped 

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    image: api-dev
    ports:
      - '5000:5000'
      - '9229:9229'
    networks:
      - api
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_IP=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USER=${DB_USER}
      - DB_DATABASE=${DB_DATABASE}
      - DB_DIALECT=${DB_DIALECT}
      - APM_SERVER_URL=${APM_SERVER_URL}
      - APM_SERVER_TOKEN=${APM_SERVER_TOKEN}
      - APM_SERVER_ACTIVE=${APM_SERVER_ACTIVE}
      - AUTH0_ISSUER_URL=${AUTH0_ISSUER_URL}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - CLIENT_URL=${CLIENT_URL}
      - MAIL_PASS=${MAIL_PASS}
      - MAIL_USER=${MAIL_USER}
      - MAIL_HOST=${MAIL_HOST}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./:/usr/src
      - ./user/src/node_modules
    restart: unless-stopped 

  worker-ranking:
    build:
      context: .
      dockerfile: apps/worker/ranking/Dockerfile.dev
    image: worker-dev
    networks:
      - api
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_IP=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USER=${DB_USER}
      - DB_DATABASE=${DB_DATABASE}
      - DB_DIALECT=${DB_DIALECT}
      - APM_SERVER_URL=${APM_SERVER_URL}
      - APM_SERVER_TOKEN=${APM_SERVER_TOKEN}
      - APM_SERVER_ACTIVE=${APM_SERVER_ACTIVE}
    depends_on:
      - redis
    volumes:
      - ./:/usr/src
      - ./user/src/node_modules
    restart: unless-stopped 
  
  worker-sync:
    build:
      context: .
      dockerfile: apps/worker/sync/Dockerfile.dev
    image: worker-ranking-dev
    networks:
      - api
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_IP=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USER=${DB_USER}
      - DB_DATABASE=${DB_DATABASE}
      - DB_DIALECT=${DB_DIALECT}
      - APM_SERVER_URL=${APM_SERVER_URL}
      - APM_SERVER_TOKEN=${APM_SERVER_TOKEN}
      - APM_SERVER_ACTIVE=${APM_SERVER_ACTIVE}
      - VR_API=${VR_API}
      - VR_API_USER=${VR_API_USER}
      - VR_API_PASS=${VR_API_PASS}
    depends_on:
      - redis
    volumes:
      - ./:/usr/src
      - ./user/src/node_modules
    restart: unless-stopped 

  # Tools
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
       - db-admin:/var/lib/pgadmin
       - ./database/backup:/home/backup
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - postgres
    restart: unless-stopped 
    logging:
      driver: "none"

networks:
  api:
  postgres:


volumes:
  db-data:
    driver: local
  db-admin: